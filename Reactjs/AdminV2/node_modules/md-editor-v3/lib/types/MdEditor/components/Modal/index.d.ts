import { App } from 'vue';

declare const _default: {
    new (...args: any[]): {
        $: import('vue').ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            title: string;
            style: import('vue').CSSProperties;
            visible: boolean;
            height: string;
            width: string;
            showAdjust: boolean;
            isFullscreen: boolean;
            onAdjust: (val: boolean) => void;
        }> & Omit<Readonly<import('vue').ExtractPropTypes<{
            title: {
                type: import("vue").PropType<string>;
                default: string;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            width: {
                type: import("vue").PropType<string>;
                default: string;
            };
            height: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onClose: {
                type: import("vue").PropType<() => void>;
            };
            showAdjust: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            isFullscreen: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onAdjust: {
                type: import("vue").PropType<(val: boolean) => void>;
                default: () => void;
            };
            class: {
                type: import("vue").PropType<string>;
            };
            style: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: () => {};
            };
        }>> & {
            onOnClose?: ((...args: any[]) => any) | undefined;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, "title" | "style" | "visible" | "height" | "width" | "showAdjust" | "isFullscreen" | "onAdjust">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import('vue').Slot | undefined;
        }>;
        $root: import('vue').ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import('vue').ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "onClose", ...args: any[]) => void;
        $el: any;
        $options: import('vue').ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            title: {
                type: import("vue").PropType<string>;
                default: string;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            width: {
                type: import("vue").PropType<string>;
                default: string;
            };
            height: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onClose: {
                type: import("vue").PropType<() => void>;
            };
            showAdjust: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            isFullscreen: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onAdjust: {
                type: import("vue").PropType<(val: boolean) => void>;
                default: () => void;
            };
            class: {
                type: import("vue").PropType<string>;
            };
            style: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: () => {};
            };
        }>> & {
            onOnClose?: ((...args: any[]) => any) | undefined;
        }, () => "" | JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onClose"[], string, {
            title: string;
            style: import("vue").CSSProperties;
            visible: boolean;
            height: string;
            width: string;
            showAdjust: boolean;
            isFullscreen: boolean;
            onAdjust: (val: boolean) => void;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import('vue').ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import('vue').nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import('vue').WatchOptions<boolean> | undefined): import('vue').WatchStopHandle;
    } & Readonly<import('vue').ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        width: {
            type: import("vue").PropType<string>;
            default: string;
        };
        height: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onClose: {
            type: import("vue").PropType<() => void>;
        };
        showAdjust: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onAdjust: {
            type: import("vue").PropType<(val: boolean) => void>;
            default: () => void;
        };
        class: {
            type: import("vue").PropType<string>;
        };
        style: {
            type: import("vue").PropType<import("vue").CSSProperties>;
            default: () => {};
        };
    }>> & {
        onOnClose?: ((...args: any[]) => any) | undefined;
    } & import('vue').ShallowUnwrapRef<() => "" | JSX.Element> & {} & import('vue').ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import('vue').ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    width: {
        type: import("vue").PropType<string>;
        default: string;
    };
    height: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onClose: {
        type: import("vue").PropType<() => void>;
    };
    showAdjust: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isFullscreen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onAdjust: {
        type: import("vue").PropType<(val: boolean) => void>;
        default: () => void;
    };
    class: {
        type: import("vue").PropType<string>;
    };
    style: {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default: () => {};
    };
}>> & {
    onOnClose?: ((...args: any[]) => any) | undefined;
}, () => "" | JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onClose"[], "onClose", {
    title: string;
    style: import("vue").CSSProperties;
    visible: boolean;
    height: string;
    width: string;
    showAdjust: boolean;
    isFullscreen: boolean;
    onAdjust: (val: boolean) => void;
}, {}, string> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
