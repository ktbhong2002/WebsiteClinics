import { debounce } from "@vavt/util";
const keyMove = (trigger, moveHandler) => {
  const triggerMouseDown = (mdown) => {
    const parent = trigger.parentElement || document.body;
    const width = parent.offsetWidth;
    const height = parent.offsetHeight;
    const { clientWidth } = document.documentElement;
    const { clientHeight } = document.documentElement;
    const x = mdown.offsetX;
    const y = mdown.offsetY;
    const mouseMoveHandler = (e) => {
      let tx = e.x + document.body.scrollLeft - document.body.clientLeft - x;
      let ty = e.y + document.body.scrollTop - document.body.clientTop - y;
      tx = tx < 1 ? 1 : tx < clientWidth - width - 1 ? tx : clientWidth - width - 1;
      ty = ty < 1 ? 1 : ty < clientHeight - height - 1 ? ty : clientHeight - height - 1;
      if (moveHandler) {
        moveHandler(tx, ty);
      } else {
        parent.style.left = `${tx}px`;
        parent.style.top = `${ty}px`;
      }
    };
    document.addEventListener("mousemove", mouseMoveHandler);
    const mouseUpHandler = () => {
      document.removeEventListener("mousemove", mouseMoveHandler);
      document.removeEventListener("mouseup", mouseUpHandler);
    };
    document.addEventListener("mouseup", mouseUpHandler);
  };
  trigger.addEventListener("mousedown", triggerMouseDown);
  return () => {
    trigger.removeEventListener("mousedown", triggerMouseDown);
  };
};
const appendHandler = (ele, checkKey = "") => {
  const insertedEle = document.getElementById(ele.id);
  const onload_ = ele.onload;
  ele.onload = null;
  const onload = function(e) {
    if (typeof onload_ === "function") {
      onload_.bind(this)(e);
    }
    ele.removeEventListener("load", onload);
  };
  if (!insertedEle) {
    ele.addEventListener("load", onload);
    document.head.appendChild(ele);
  } else if (checkKey !== "") {
    insertedEle.addEventListener("load", onload);
    if (Reflect.get(window, checkKey)) {
      insertedEle.dispatchEvent(new Event("load"));
    }
  }
};
const updateHandler = debounce((id, attr, value) => {
  const ele = document.getElementById(id);
  if (ele) {
    ele.setAttribute(attr, value);
  }
}, 10);
export {
  appendHandler as a,
  keyMove as k,
  updateHandler as u
};
