import {
  _createClass
} from "./chunk-U2GXYNBF.js";
import {
  _inheritsLoose
} from "./chunk-T2RGT4ZC.js";
import {
  _assertThisInitialized
} from "./chunk-KPCKTKIM.js";
import "./chunk-LHMD4SLY.js";
import {
  _extends,
  init_extends
} from "./chunk-PURFUZOY.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  __commonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter2;
    }
  }
});

// node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/uuid/lib/rng-browser.js"(exports, module) {
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
    var byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]]
      ].join("");
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/v4.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v4;
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames2() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames2.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames2.default = classNames2;
        module.exports = classNames2;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames2;
        });
      } else {
        window.classNames = classNames2;
      }
    })();
  }
});

// node_modules/react-markdown-editor-lite/esm/editor/index.js
init_extends();
var React7 = __toESM(require_react());

// node_modules/react-markdown-editor-lite/esm/components/Icon/index.js
var React = __toESM(require_react());
function Icon(props) {
  return React.createElement("i", {
    className: "rmel-iconfont rmel-icon-" + props.type
  });
}

// node_modules/react-markdown-editor-lite/esm/components/NavigationBar/index.js
var React2 = __toESM(require_react());
function NavigationBar(props) {
  return React2.createElement("div", {
    className: "rc-md-navigation " + (props.visible ? "visible" : "in-visible")
  }, React2.createElement("div", {
    className: "navigation-nav left"
  }, React2.createElement("div", {
    className: "button-wrap"
  }, props.left)), React2.createElement("div", {
    className: "navigation-nav right"
  }, React2.createElement("div", {
    className: "button-wrap"
  }, props.right)));
}

// node_modules/react-markdown-editor-lite/esm/components/ToolBar/index.js
var React3 = __toESM(require_react());
function ToolBar(props) {
  return React3.createElement("div", {
    className: "tool-bar",
    style: props.style
  }, props.children);
}

// node_modules/react-markdown-editor-lite/esm/share/emitter.js
var import_eventemitter3 = __toESM(require_eventemitter3());
var Emitter = function(_EventEmitter) {
  _inheritsLoose(Emitter2, _EventEmitter);
  function Emitter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _EventEmitter.call.apply(_EventEmitter, [this].concat(args)) || this;
    _this.EVENT_CHANGE = "a1";
    _this.EVENT_FULL_SCREEN = "a2";
    _this.EVENT_VIEW_CHANGE = "a3";
    _this.EVENT_KEY_DOWN = "a4";
    _this.EVENT_FOCUS = "a5";
    _this.EVENT_BLUR = "a6";
    _this.EVENT_SCROLL = "a7";
    _this.EVENT_LANG_CHANGE = "b1";
    return _this;
  }
  return Emitter2;
}(import_eventemitter3.EventEmitter);
var globalEmitter = new Emitter();
var emitter_default = Emitter;

// node_modules/react-markdown-editor-lite/esm/i18n/lang/en-US.js
var en_US_default = {
  clearTip: "Are you sure you want to clear all contents?",
  btnHeader: "Header",
  btnClear: "Clear",
  btnBold: "Bold",
  btnItalic: "Italic",
  btnUnderline: "Underline",
  btnStrikethrough: "Strikethrough",
  btnUnordered: "Unordered list",
  btnOrdered: "Ordered list",
  btnQuote: "Quote",
  btnLineBreak: "Line break",
  btnInlineCode: "Inline code",
  btnCode: "Code",
  btnTable: "Table",
  btnImage: "Image",
  btnLink: "Link",
  btnUndo: "Undo",
  btnRedo: "Redo",
  btnFullScreen: "Full screen",
  btnExitFullScreen: "Exit full screen",
  btnModeEditor: "Only display editor",
  btnModePreview: "Only display preview",
  btnModeAll: "Display both editor and preview",
  selectTabMap: "Actually input when typing a Tab key",
  tab: "Tab",
  spaces: "Spaces"
};

// node_modules/react-markdown-editor-lite/esm/i18n/lang/zh-CN.js
var zh_CN_default = {
  clearTip: "您确定要清空所有内容吗？",
  btnHeader: "标题",
  btnClear: "清空",
  btnBold: "加粗",
  btnItalic: "斜体",
  btnUnderline: "下划线",
  btnStrikethrough: "删除线",
  btnUnordered: "无序列表",
  btnOrdered: "有序列表",
  btnQuote: "引用",
  btnLineBreak: "换行",
  btnInlineCode: "行内代码",
  btnCode: "代码块",
  btnTable: "表格",
  btnImage: "图片",
  btnLink: "链接",
  btnUndo: "撤销",
  btnRedo: "重做",
  btnFullScreen: "全屏",
  btnExitFullScreen: "退出全屏",
  btnModeEditor: "仅显示编辑器",
  btnModePreview: "仅显示预览",
  btnModeAll: "显示编辑器与预览",
  selectTabMap: "按下 Tab 键时实际的输入",
  tab: "制表符",
  spaces: "空格"
};

// node_modules/react-markdown-editor-lite/esm/i18n/index.js
var I18n = function() {
  function I18n2() {
    this.langs = {
      enUS: en_US_default,
      zhCN: zh_CN_default
    };
    this.current = "enUS";
    this.setUp();
  }
  var _proto = I18n2.prototype;
  _proto.setUp = function setUp() {
    if (typeof window === "undefined") {
      return;
    }
    var locale = "enUS";
    if (navigator.language) {
      var it = navigator.language.split("-");
      locale = it[0];
      if (it.length !== 1) {
        locale += it[it.length - 1].toUpperCase();
      }
    }
    if (navigator.browserLanguage) {
      var _it = navigator.browserLanguage.split("-");
      locale = _it[0];
      if (_it[1]) {
        locale += _it[1].toUpperCase();
      }
    }
    if (this.current !== locale && this.isAvailable(locale)) {
      this.current = locale;
      globalEmitter.emit(globalEmitter.EVENT_LANG_CHANGE, this, locale, this.langs[locale]);
    }
  };
  _proto.isAvailable = function isAvailable(langName) {
    return typeof this.langs[langName] !== "undefined";
  };
  _proto.add = function add(langName, lang) {
    this.langs[langName] = lang;
  };
  _proto.setCurrent = function setCurrent(langName) {
    if (!this.isAvailable(langName)) {
      throw new Error("Language " + langName + " is not exists");
    }
    if (this.current !== langName) {
      this.current = langName;
      globalEmitter.emit(globalEmitter.EVENT_LANG_CHANGE, this, langName, this.langs[langName]);
    }
  };
  _proto.get = function get(key, placeholders) {
    var str = this.langs[this.current][key] || "";
    if (placeholders) {
      Object.keys(placeholders).forEach(function(k) {
        str = str.replace(new RegExp("\\{" + k + "\\}", "g"), placeholders[k]);
      });
    }
    return str;
  };
  _proto.getCurrent = function getCurrent() {
    return this.current;
  };
  return I18n2;
}();
var i18n = new I18n();
var i18n_default = i18n;

// node_modules/react-markdown-editor-lite/esm/plugins/divider/index.js
var React5 = __toESM(require_react());

// node_modules/react-markdown-editor-lite/esm/plugins/Plugin.js
var React4 = __toESM(require_react());
var PluginComponent = function(_React$Component) {
  _inheritsLoose(PluginComponent2, _React$Component);
  function PluginComponent2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = PluginComponent2.prototype;
  _proto.getConfig = function getConfig(key, defaultValue) {
    return typeof this.props.config[key] !== "undefined" && this.props.config[key] !== null ? this.props.config[key] : defaultValue;
  };
  _createClass(PluginComponent2, [{
    key: "editor",
    get: function get() {
      return this.props.editor;
    }
  }, {
    key: "editorConfig",
    get: function get() {
      return this.props.editorConfig;
    }
  }]);
  return PluginComponent2;
}(React4.Component);
PluginComponent.pluginName = "";
PluginComponent.align = "left";
PluginComponent.defaultConfig = {};

// node_modules/react-markdown-editor-lite/esm/plugins/divider/index.js
var Divider = function(_PluginComponent) {
  _inheritsLoose(Divider2, _PluginComponent);
  function Divider2() {
    return _PluginComponent.apply(this, arguments) || this;
  }
  var _proto = Divider2.prototype;
  _proto.render = function render() {
    return React5.createElement("span", {
      className: "rc-md-divider"
    });
  };
  return Divider2;
}(PluginComponent);
Divider.pluginName = "divider";

// node_modules/react-markdown-editor-lite/esm/share/var.js
var initialSelection = {
  start: 0,
  end: 0,
  text: ""
};

// node_modules/react-markdown-editor-lite/esm/utils/tool.js
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function isPromise(obj) {
  return obj && (obj instanceof Promise || (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function");
}
function repeat(str, num) {
  var result = "";
  var n = num;
  while (n--) {
    result += str;
  }
  return result;
}
function isKeyMatch(event, cond) {
  var withKey = cond.withKey, keyCode = cond.keyCode, key = cond.key, aliasCommand = cond.aliasCommand;
  var e = {
    ctrlKey: event.ctrlKey,
    metaKey: event.metaKey,
    altKey: event.altKey,
    shiftKey: event.shiftKey,
    keyCode: event.keyCode,
    key: event.key
  };
  if (aliasCommand) {
    e.ctrlKey = e.ctrlKey || e.metaKey;
  }
  if (withKey && withKey.length > 0) {
    for (var _iterator = _createForOfIteratorHelperLoose(withKey), _step; !(_step = _iterator()).done; ) {
      var it = _step.value;
      if (typeof e[it] !== "undefined" && !e[it]) {
        return false;
      }
    }
  } else {
    if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {
      return false;
    }
  }
  if (e.key) {
    return e.key === key;
  } else {
    return e.keyCode === keyCode;
  }
}
function getLineAndCol(text, pos) {
  var lines = text.split("\n");
  var beforeLines = text.substr(0, pos).split("\n");
  var line = beforeLines.length;
  var col = beforeLines[beforeLines.length - 1].length;
  var curLine = lines[beforeLines.length - 1];
  var prevLine = beforeLines.length > 1 ? beforeLines[beforeLines.length - 2] : null;
  var nextLine = lines.length > beforeLines.length ? lines[beforeLines.length] : null;
  return {
    line,
    col,
    beforeText: text.substr(0, pos),
    afterText: text.substr(pos),
    curLine,
    prevLine,
    nextLine
  };
}

// node_modules/react-markdown-editor-lite/esm/utils/decorate.js
var SIMPLE_DECORATOR = {
  bold: ["**", "**"],
  italic: ["*", "*"],
  underline: ["++", "++"],
  strikethrough: ["~~", "~~"],
  quote: ["\n> ", "\n"],
  inlinecode: ["`", "`"],
  code: ["\n```\n", "\n```\n"]
};
for (i = 1; i <= 6; i++) {
  SIMPLE_DECORATOR["h" + i] = ["\n" + repeat("#", i) + " ", "\n"];
}
var i;
function decorateTableText(option) {
  var _option$row = option.row, row = _option$row === void 0 ? 2 : _option$row, _option$col = option.col, col = _option$col === void 0 ? 2 : _option$col;
  var rowHeader = ["|"];
  var rowData = ["|"];
  var rowDivision = ["|"];
  var colStr = "";
  for (var _i = 1; _i <= col; _i++) {
    rowHeader.push(" Head |");
    rowDivision.push(" --- |");
    rowData.push(" Data |");
  }
  for (var j = 1; j <= row; j++) {
    colStr += "\n" + rowData.join("");
  }
  return rowHeader.join("") + "\n" + rowDivision.join("") + colStr;
}
function decorateList(type, target) {
  var text = target;
  if (text.substr(0, 1) !== "\n") {
    text = "\n" + text;
  }
  if (type === "unordered") {
    return text.length > 1 ? text.replace(/\n/g, "\n* ").trim() : "* ";
  } else {
    var count = 1;
    if (text.length > 1) {
      return text.replace(/\n/g, function() {
        return "\n" + count++ + ". ";
      }).trim();
    } else {
      return "1. ";
    }
  }
}
function createTextDecorated(text, newBlock) {
  return {
    text,
    newBlock,
    selection: {
      start: text.length,
      end: text.length
    }
  };
}
function getDecorated(target, type, option) {
  if (typeof SIMPLE_DECORATOR[type] !== "undefined") {
    return {
      text: "" + SIMPLE_DECORATOR[type][0] + target + SIMPLE_DECORATOR[type][1],
      selection: {
        start: SIMPLE_DECORATOR[type][0].length,
        end: SIMPLE_DECORATOR[type][0].length + target.length
      }
    };
  }
  switch (type) {
    case "tab":
      var inputValue = option.tabMapValue === 1 ? "	" : " ".repeat(option.tabMapValue);
      var newSelectedText = inputValue + target.replace(/\n/g, "\n" + inputValue);
      var lineBreakCount = target.includes("\n") ? target.match(/\n/g).length : 0;
      return {
        text: newSelectedText,
        selection: {
          start: option.tabMapValue,
          end: option.tabMapValue * (lineBreakCount + 1) + target.length
        }
      };
    case "unordered":
      return createTextDecorated(decorateList("unordered", target), true);
    case "order":
      return createTextDecorated(decorateList("order", target), true);
    case "hr":
      return createTextDecorated("---", true);
    case "table":
      return {
        text: decorateTableText(option),
        newBlock: true
      };
    case "image":
      return {
        text: "![" + (target || option.target) + "](" + (option.imageUrl || "") + ")",
        selection: {
          start: 2,
          end: target.length + 2
        }
      };
    case "link":
      return {
        text: "[" + target + "](" + (option.linkUrl || "") + ")",
        selection: {
          start: 1,
          end: target.length + 1
        }
      };
  }
  return {
    text: target,
    selection: {
      start: 0,
      end: target.length
    }
  };
}
var decorate_default = getDecorated;

// node_modules/react-markdown-editor-lite/esm/utils/mergeConfig.js
init_extends();
function mergeObject(obj1, obj2) {
  var result = {};
  Object.keys(obj1).forEach(function(k) {
    if (typeof obj2[k] === "undefined") {
      result[k] = obj1[k];
      return;
    }
    if (typeof obj2[k] === "object") {
      if (Array.isArray(obj2[k])) {
        result[k] = [].concat(obj2[k]);
      } else {
        result[k] = mergeObject(obj1[k], obj2[k]);
      }
      return;
    }
    result[k] = obj2[k];
  });
  return result;
}
function mergeConfig_default(defaultConfig2) {
  var res = _extends({}, defaultConfig2);
  for (var _len = arguments.length, configs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    configs[_key - 1] = arguments[_key];
  }
  configs.forEach(function(conf) {
    if (typeof conf !== "object") {
      return;
    }
    res = mergeObject(res, conf);
  });
  return res;
}

// node_modules/react-markdown-editor-lite/esm/utils/uploadPlaceholder.js
var uuid = __toESM(require_v4());
function getUploadPlaceholder(file, onImageUpload) {
  var placeholder = decorate_default("", "image", {
    target: "Uploading_" + uuid(),
    imageUrl: ""
  }).text;
  var uploaded = new Promise(function(resolve) {
    var isCallback = true;
    var handleUploaded = function handleUploaded2(url) {
      if (isCallback) {
        console.warn("Deprecated: onImageUpload should return a Promise, callback will be removed in future");
      }
      resolve(decorate_default("", "image", {
        target: file.name,
        imageUrl: url
      }).text);
    };
    var upload = onImageUpload(file, handleUploaded);
    if (isPromise(upload)) {
      isCallback = false;
      upload.then(handleUploaded);
    }
  });
  return {
    placeholder,
    uploaded
  };
}
var uploadPlaceholder_default = getUploadPlaceholder;

// node_modules/react-markdown-editor-lite/esm/editor/defaultConfig.js
var defaultConfig = {
  theme: "default",
  view: {
    menu: true,
    md: true,
    html: true
  },
  canView: {
    menu: true,
    md: true,
    html: true,
    both: true,
    fullScreen: true,
    hideMenu: true
  },
  htmlClass: "",
  markdownClass: "",
  syncScrollMode: ["rightFollowLeft", "leftFollowRight"],
  imageUrl: "",
  imageAccept: "",
  linkUrl: "",
  table: {
    maxRow: 4,
    maxCol: 6
  },
  allowPasteImage: true,
  onImageUpload: void 0,
  onCustomImageUpload: void 0,
  shortcuts: true
};
var defaultConfig_default = defaultConfig;

// node_modules/react-markdown-editor-lite/esm/editor/preview.js
var React6 = __toESM(require_react());
var Preview = function(_React$Component) {
  _inheritsLoose(Preview2, _React$Component);
  function Preview2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.el = React6.createRef();
    return _this;
  }
  var _proto = Preview2.prototype;
  _proto.getElement = function getElement() {
    return this.el.current;
  };
  _proto.getHeight = function getHeight() {
    return this.el.current ? this.el.current.offsetHeight : 0;
  };
  return Preview2;
}(React6.Component);
var HtmlRender = function(_Preview) {
  _inheritsLoose(HtmlRender2, _Preview);
  function HtmlRender2() {
    return _Preview.apply(this, arguments) || this;
  }
  var _proto2 = HtmlRender2.prototype;
  _proto2.getHtml = function getHtml() {
    if (typeof this.props.html === "string") {
      return this.props.html;
    }
    if (this.el.current) {
      return this.el.current.innerHTML;
    }
    return "";
  };
  _proto2.render = function render() {
    return typeof this.props.html === "string" ? React6.createElement("div", {
      ref: this.el,
      dangerouslySetInnerHTML: {
        __html: this.props.html
      },
      className: this.props.className || "custom-html-style"
    }) : React6.createElement("div", {
      ref: this.el,
      className: this.props.className || "custom-html-style"
    }, this.props.html);
  };
  return HtmlRender2;
}(Preview);

// node_modules/react-markdown-editor-lite/esm/editor/index.js
function _createForOfIteratorHelperLoose2(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var Editor = function(_React$Component) {
  _inheritsLoose(Editor2, _React$Component);
  Editor2.use = function use(comp, config) {
    if (config === void 0) {
      config = {};
    }
    for (var i = 0; i < Editor2.plugins.length; i++) {
      if (Editor2.plugins[i].comp === comp) {
        Editor2.plugins.splice(i, 1, {
          comp,
          config
        });
        return;
      }
    }
    Editor2.plugins.push({
      comp,
      config
    });
  };
  Editor2.unuse = function unuse(comp) {
    for (var i = 0; i < Editor2.plugins.length; i++) {
      if (Editor2.plugins[i].comp === comp) {
        Editor2.plugins.splice(i, 1);
        return;
      }
    }
  };
  Editor2.unuseAll = function unuseAll() {
    Editor2.plugins = [];
  };
  function Editor2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.nodeMdText = React7.createRef();
    _this.nodeMdPreview = React7.createRef();
    _this.nodeMdPreviewWrapper = React7.createRef();
    _this.hasContentChanged = true;
    _this.scrollScale = 1;
    _this.isSyncingScroll = false;
    _this.shouldSyncScroll = "md";
    _this.keyboardListeners = [];
    _this.emitter = new emitter_default();
    _this.config = mergeConfig_default(defaultConfig_default, _this.props.config, _this.props);
    _this.state = {
      text: (_this.props.value || _this.props.defaultValue || "").replace(/↵/g, "\n"),
      html: "",
      view: _this.config.view || defaultConfig_default.view,
      fullScreen: false,
      plugins: _this.getPlugins()
    };
    if (_this.config.canView && !_this.config.canView.menu) {
      _this.state.view.menu = false;
    }
    _this.nodeMdText = React7.createRef();
    _this.nodeMdPreviewWrapper = React7.createRef();
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.handlePaste = _this.handlePaste.bind(_assertThisInitialized(_this));
    _this.handleDrop = _this.handleDrop.bind(_assertThisInitialized(_this));
    _this.handleToggleMenu = _this.handleToggleMenu.bind(_assertThisInitialized(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleEditorKeyDown = _this.handleEditorKeyDown.bind(_assertThisInitialized(_this));
    _this.handleLocaleUpdate = _this.handleLocaleUpdate.bind(_assertThisInitialized(_this));
    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    _this.handleInputScroll = _this.handleSyncScroll.bind(_assertThisInitialized(_this), "md");
    _this.handlePreviewScroll = _this.handleSyncScroll.bind(_assertThisInitialized(_this), "html");
    return _this;
  }
  var _proto = Editor2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var text = this.state.text;
    this.renderHTML(text);
    globalEmitter.on(globalEmitter.EVENT_LANG_CHANGE, this.handleLocaleUpdate);
    i18n_default.setUp();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    globalEmitter.off(globalEmitter.EVENT_LANG_CHANGE, this.handleLocaleUpdate);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (typeof this.props.value !== "undefined" && this.props.value !== this.state.text) {
      var value = this.props.value;
      if (typeof value !== "string") {
        value = String(value).toString();
      }
      value = value.replace(/↵/g, "\n");
      if (this.state.text !== value) {
        this.setState({
          text: value
        });
        this.renderHTML(value);
      }
    }
    if (prevProps.plugins !== this.props.plugins) {
      this.setState({
        plugins: this.getPlugins()
      });
    }
  };
  _proto.getPlugins = function getPlugins() {
    var _this2 = this;
    var plugins = [];
    if (this.props.plugins) {
      var addToPlugins = function addToPlugins2(name2) {
        if (name2 === Divider.pluginName) {
          plugins.push({
            comp: Divider,
            config: {}
          });
          return;
        }
        for (var _iterator = _createForOfIteratorHelperLoose2(Editor2.plugins), _step; !(_step = _iterator()).done; ) {
          var it = _step.value;
          if (it.comp.pluginName === name2) {
            plugins.push(it);
            return;
          }
        }
      };
      for (var _iterator2 = _createForOfIteratorHelperLoose2(this.props.plugins), _step2; !(_step2 = _iterator2()).done; ) {
        var name = _step2.value;
        if (name === "fonts") {
          addToPlugins("font-bold");
          addToPlugins("font-italic");
          addToPlugins("font-underline");
          addToPlugins("font-strikethrough");
          addToPlugins("list-unordered");
          addToPlugins("list-ordered");
          addToPlugins("block-quote");
          addToPlugins("block-wrap");
          addToPlugins("block-code-inline");
          addToPlugins("block-code-block");
        } else {
          addToPlugins(name);
        }
      }
    } else {
      plugins = [].concat(Editor2.plugins);
    }
    var result = {};
    plugins.forEach(function(it) {
      if (typeof result[it.comp.align] === "undefined") {
        result[it.comp.align] = [];
      }
      result[it.comp.align].push(React7.createElement(it.comp, {
        editor: _this2,
        editorConfig: _this2.config,
        config: _extends({}, it.comp.defaultConfig || {}, it.config || {}),
        key: it.comp.pluginName
      }));
    });
    return result;
  };
  _proto.handleSyncScroll = function handleSyncScroll(type, e) {
    var _this3 = this;
    if (type !== this.shouldSyncScroll) {
      return;
    }
    if (this.props.onScroll) {
      this.props.onScroll(e, type);
    }
    this.emitter.emit(this.emitter.EVENT_SCROLL, e, type);
    var _this$config$syncScro = this.config.syncScrollMode, syncScrollMode = _this$config$syncScro === void 0 ? [] : _this$config$syncScro;
    if (!syncScrollMode.includes(type === "md" ? "rightFollowLeft" : "leftFollowRight")) {
      return;
    }
    if (this.hasContentChanged && this.nodeMdText.current && this.nodeMdPreviewWrapper.current) {
      this.scrollScale = this.nodeMdText.current.scrollHeight / this.nodeMdPreviewWrapper.current.scrollHeight;
      this.hasContentChanged = false;
    }
    if (!this.isSyncingScroll) {
      this.isSyncingScroll = true;
      requestAnimationFrame(function() {
        if (_this3.nodeMdText.current && _this3.nodeMdPreviewWrapper.current) {
          if (type === "md") {
            _this3.nodeMdPreviewWrapper.current.scrollTop = _this3.nodeMdText.current.scrollTop / _this3.scrollScale;
          } else {
            _this3.nodeMdText.current.scrollTop = _this3.nodeMdPreviewWrapper.current.scrollTop * _this3.scrollScale;
          }
        }
        _this3.isSyncingScroll = false;
      });
    }
  };
  _proto.renderHTML = function renderHTML(markdownText) {
    var _this4 = this;
    if (!this.props.renderHTML) {
      console.error("renderHTML props is required!");
      return Promise.resolve();
    }
    var res = this.props.renderHTML(markdownText);
    if (isPromise(res)) {
      return res.then(function(r) {
        return _this4.setHtml(r);
      });
    }
    if (typeof res === "function") {
      return this.setHtml(res());
    }
    return this.setHtml(res);
  };
  _proto.setHtml = function setHtml(html) {
    var _this5 = this;
    return new Promise(function(resolve) {
      _this5.setState({
        html
      }, resolve);
    });
  };
  _proto.handleToggleMenu = function handleToggleMenu() {
    this.setView({
      menu: !this.state.view.menu
    });
  };
  _proto.handleFocus = function handleFocus(e) {
    var onFocus = this.props.onFocus;
    if (onFocus) {
      onFocus(e);
    }
    this.emitter.emit(this.emitter.EVENT_FOCUS, e);
  };
  _proto.handleBlur = function handleBlur(e) {
    var onBlur = this.props.onBlur;
    if (onBlur) {
      onBlur(e);
    }
    this.emitter.emit(this.emitter.EVENT_BLUR, e);
  };
  _proto.handleChange = function handleChange(e) {
    e.persist();
    var value = e.target.value;
    this.setText(value, e);
  };
  _proto.handlePaste = function handlePaste(e) {
    if (!this.config.allowPasteImage || !this.config.onImageUpload) {
      return;
    }
    var event = e.nativeEvent;
    var items = (event.clipboardData || window.clipboardData).items;
    if (items) {
      e.preventDefault();
      this.uploadWithDataTransfer(items);
    }
  };
  _proto.handleDrop = function handleDrop(e) {
    if (!this.config.onImageUpload) {
      return;
    }
    var event = e.nativeEvent;
    if (!event.dataTransfer) {
      return;
    }
    var items = event.dataTransfer.items;
    if (items) {
      e.preventDefault();
      this.uploadWithDataTransfer(items);
    }
  };
  _proto.handleEditorKeyDown = function handleEditorKeyDown(e) {
    var _this6 = this;
    var keyCode = e.keyCode, key = e.key, currentTarget = e.currentTarget;
    if (keyCode === 13 || key === "Enter") {
      var _text = e.currentTarget.value;
      var curPos = currentTarget.selectionStart;
      var lineInfo = getLineAndCol(_text, curPos);
      var emptyCurrentLine = function emptyCurrentLine2() {
        var newValue = currentTarget.value.substr(0, curPos - lineInfo.curLine.length) + currentTarget.value.substr(curPos);
        _this6.setText(newValue, void 0, {
          start: curPos - lineInfo.curLine.length,
          end: curPos - lineInfo.curLine.length
        });
        e.preventDefault();
      };
      var addSymbol = function addSymbol2(symbol) {
        _this6.insertText("\n" + symbol, false, {
          start: symbol.length + 1,
          end: symbol.length + 1
        });
        e.preventDefault();
      };
      var isSymbol = lineInfo.curLine.match(/^(\s?)([-*]) /);
      if (isSymbol) {
        if (/^(\s?)([-*]) $/.test(lineInfo.curLine)) {
          emptyCurrentLine();
          return;
        }
        addSymbol(isSymbol[0]);
        return;
      }
      var isOrderList = lineInfo.curLine.match(/^(\s?)(\d+)\. /);
      if (isOrderList) {
        if (/^(\s?)(\d+)\. $/.test(lineInfo.curLine)) {
          emptyCurrentLine();
          return;
        }
        var toInsert = "" + isOrderList[1] + (parseInt(isOrderList[2], 10) + 1) + ". ";
        addSymbol(toInsert);
      }
    }
  };
  _proto.handleLocaleUpdate = function handleLocaleUpdate() {
    this.forceUpdate();
  };
  _proto.getMdElement = function getMdElement() {
    return this.nodeMdText.current;
  };
  _proto.getHtmlElement = function getHtmlElement() {
    return this.nodeMdPreviewWrapper.current;
  };
  _proto.clearSelection = function clearSelection() {
    if (this.nodeMdText.current) {
      this.nodeMdText.current.setSelectionRange(0, 0, "none");
    }
  };
  _proto.getSelection = function getSelection() {
    var source = this.nodeMdText.current;
    if (!source) {
      return _extends({}, initialSelection);
    }
    var start = source.selectionStart;
    var end = source.selectionEnd;
    var text = (source.value || "").slice(start, end);
    return {
      start,
      end,
      text
    };
  };
  _proto.setSelection = function setSelection(to) {
    if (this.nodeMdText.current) {
      this.nodeMdText.current.setSelectionRange(to.start, to.end, "forward");
      this.nodeMdText.current.focus();
    }
  };
  _proto.insertMarkdown = function insertMarkdown(type, option) {
    if (option === void 0) {
      option = {};
    }
    var curSelection = this.getSelection();
    var decorateOption = option ? _extends({}, option) : {};
    if (type === "image") {
      decorateOption = _extends({}, decorateOption, {
        target: option.target || curSelection.text || "",
        imageUrl: option.imageUrl || this.config.imageUrl
      });
    }
    if (type === "link") {
      decorateOption = _extends({}, decorateOption, {
        linkUrl: this.config.linkUrl
      });
    }
    if (type === "tab" && curSelection.start !== curSelection.end) {
      var curLineStart = this.getMdValue().slice(0, curSelection.start).lastIndexOf("\n") + 1;
      this.setSelection({
        start: curLineStart,
        end: curSelection.end
      });
    }
    var decorate = decorate_default(curSelection.text, type, decorateOption);
    var text = decorate.text;
    var selection = decorate.selection;
    if (decorate.newBlock) {
      var startLineInfo = getLineAndCol(this.getMdValue(), curSelection.start);
      var col = startLineInfo.col, curLine = startLineInfo.curLine;
      if (col > 0 && curLine.length > 0) {
        text = "\n" + text;
        if (selection) {
          selection.start++;
          selection.end++;
        }
      }
      var afterText = startLineInfo.afterText;
      if (curSelection.start !== curSelection.end) {
        afterText = getLineAndCol(this.getMdValue(), curSelection.end).afterText;
      }
      if (afterText.trim() !== "" && afterText.substr(0, 2) !== "\n\n") {
        if (afterText.substr(0, 1) !== "\n") {
          text += "\n";
        }
        text += "\n";
      }
    }
    this.insertText(text, true, selection);
  };
  _proto.insertPlaceholder = function insertPlaceholder(placeholder, wait) {
    var _this7 = this;
    this.insertText(placeholder, true);
    wait.then(function(str) {
      var text = _this7.getMdValue().replace(placeholder, str);
      _this7.setText(text);
    });
  };
  _proto.insertText = function insertText(value, replaceSelected, newSelection) {
    if (value === void 0) {
      value = "";
    }
    if (replaceSelected === void 0) {
      replaceSelected = false;
    }
    var text = this.state.text;
    var selection = this.getSelection();
    var beforeContent = text.slice(0, selection.start);
    var afterContent = text.slice(replaceSelected ? selection.end : selection.start, text.length);
    this.setText(beforeContent + value + afterContent, void 0, newSelection ? {
      start: newSelection.start + beforeContent.length,
      end: newSelection.end + beforeContent.length
    } : {
      start: selection.start,
      end: selection.start
    });
  };
  _proto.setText = function setText(value, event, newSelection) {
    var _this8 = this;
    if (value === void 0) {
      value = "";
    }
    var _this$config$onChange = this.config.onChangeTrigger, onChangeTrigger = _this$config$onChange === void 0 ? "both" : _this$config$onChange;
    var text = value.replace(/↵/g, "\n");
    if (this.state.text === value) {
      return;
    }
    this.setState({
      text
    });
    if (this.props.onChange && (onChangeTrigger === "both" || onChangeTrigger === "beforeRender")) {
      this.props.onChange({
        text,
        html: this.getHtmlValue()
      }, event);
    }
    this.emitter.emit(this.emitter.EVENT_CHANGE, value, event, typeof event === "undefined");
    if (newSelection) {
      setTimeout(function() {
        return _this8.setSelection(newSelection);
      });
    }
    if (!this.hasContentChanged) {
      this.hasContentChanged = true;
    }
    var rendering = this.renderHTML(text);
    if (onChangeTrigger === "both" || onChangeTrigger === "afterRender") {
      rendering.then(function() {
        if (_this8.props.onChange) {
          _this8.props.onChange({
            text: _this8.state.text,
            html: _this8.getHtmlValue()
          }, event);
        }
      });
    }
  };
  _proto.getMdValue = function getMdValue() {
    return this.state.text;
  };
  _proto.getHtmlValue = function getHtmlValue() {
    if (typeof this.state.html === "string") {
      return this.state.html;
    }
    if (this.nodeMdPreview.current) {
      return this.nodeMdPreview.current.getHtml();
    }
    return "";
  };
  _proto.onKeyboard = function onKeyboard(data) {
    var _this9 = this;
    if (Array.isArray(data)) {
      data.forEach(function(it) {
        return _this9.onKeyboard(it);
      });
      return;
    }
    if (!this.keyboardListeners.includes(data)) {
      this.keyboardListeners.push(data);
    }
  };
  _proto.offKeyboard = function offKeyboard(data) {
    var _this10 = this;
    if (Array.isArray(data)) {
      data.forEach(function(it) {
        return _this10.offKeyboard(it);
      });
      return;
    }
    var index = this.keyboardListeners.indexOf(data);
    if (index >= 0) {
      this.keyboardListeners.splice(index, 1);
    }
  };
  _proto.handleKeyDown = function handleKeyDown(e) {
    for (var _iterator3 = _createForOfIteratorHelperLoose2(this.keyboardListeners), _step3; !(_step3 = _iterator3()).done; ) {
      var it = _step3.value;
      if (isKeyMatch(e, it)) {
        e.preventDefault();
        it.callback(e);
        return;
      }
    }
    this.emitter.emit(this.emitter.EVENT_KEY_DOWN, e);
  };
  _proto.getEventType = function getEventType(event) {
    switch (event) {
      case "change":
        return this.emitter.EVENT_CHANGE;
      case "fullscreen":
        return this.emitter.EVENT_FULL_SCREEN;
      case "viewchange":
        return this.emitter.EVENT_VIEW_CHANGE;
      case "keydown":
        return this.emitter.EVENT_KEY_DOWN;
      case "blur":
        return this.emitter.EVENT_BLUR;
      case "focus":
        return this.emitter.EVENT_FOCUS;
      case "scroll":
        return this.emitter.EVENT_SCROLL;
    }
  };
  _proto.on = function on(event, cb) {
    var eventType = this.getEventType(event);
    if (eventType) {
      this.emitter.on(eventType, cb);
    }
  };
  _proto.off = function off(event, cb) {
    var eventType = this.getEventType(event);
    if (eventType) {
      this.emitter.off(eventType, cb);
    }
  };
  _proto.setView = function setView(to) {
    var _this11 = this;
    var newView = _extends({}, this.state.view, to);
    this.setState({
      view: newView
    }, function() {
      _this11.emitter.emit(_this11.emitter.EVENT_VIEW_CHANGE, newView);
    });
  };
  _proto.getView = function getView() {
    return _extends({}, this.state.view);
  };
  _proto.fullScreen = function fullScreen(enable) {
    var _this12 = this;
    if (this.state.fullScreen !== enable) {
      this.setState({
        fullScreen: enable
      }, function() {
        _this12.emitter.emit(_this12.emitter.EVENT_FULL_SCREEN, enable);
      });
    }
  };
  _proto.isFullScreen = function isFullScreen() {
    return this.state.fullScreen;
  };
  _proto.uploadWithDataTransfer = function uploadWithDataTransfer(items) {
    var _this13 = this;
    var onImageUpload = this.config.onImageUpload;
    if (!onImageUpload) {
      return;
    }
    var queue = [];
    Array.prototype.forEach.call(items, function(it) {
      if (it.kind === "file" && it.type.includes("image")) {
        var file = it.getAsFile();
        if (file) {
          var placeholder = uploadPlaceholder_default(file, onImageUpload);
          queue.push(Promise.resolve(placeholder.placeholder));
          placeholder.uploaded.then(function(str) {
            var text = _this13.getMdValue().replace(placeholder.placeholder, str);
            var offset = str.length - placeholder.placeholder.length;
            var selection = _this13.getSelection();
            _this13.setText(text, void 0, {
              start: selection.start + offset,
              end: selection.start + offset
            });
          });
        }
      } else if (it.kind === "string" && it.type === "text/plain") {
        queue.push(new Promise(function(resolve) {
          return it.getAsString(resolve);
        }));
      }
    });
    Promise.all(queue).then(function(res) {
      var text = res.join("");
      var selection = _this13.getSelection();
      _this13.insertText(text, true, {
        start: selection.start === selection.end ? text.length : 0,
        end: text.length
      });
    });
  };
  _proto.render = function render() {
    var _this14 = this;
    var showHideMenu = this.config.canView && this.config.canView.hideMenu && !this.config.canView.menu;
    var _this$state = this.state, view = _this$state.view, fullScreen = _this$state.fullScreen;
    var getPluginAt = function getPluginAt2(at) {
      return _this14.state.plugins[at] || [];
    };
    var isShowMenu = !!view.menu;
    var id = this.props.id;
    var editorId = id ? id + "_md" : void 0;
    var previewerId = id ? id + "_html" : void 0;
    return React7.createElement("div", {
      id,
      className: "rc-md-editor " + (fullScreen ? "full" : ""),
      style: this.props.style,
      onKeyDown: this.handleKeyDown,
      onDrop: this.handleDrop
    }, React7.createElement(NavigationBar, {
      visible: isShowMenu,
      left: getPluginAt("left"),
      right: getPluginAt("right")
    }), React7.createElement("div", {
      className: "editor-container"
    }, showHideMenu && React7.createElement(ToolBar, null, React7.createElement("span", {
      className: "button button-type-menu",
      title: isShowMenu ? "hidden menu" : "show menu",
      onClick: this.handleToggleMenu
    }, React7.createElement(Icon, {
      type: "expand-" + (isShowMenu ? "less" : "more")
    }))), React7.createElement("section", {
      className: "section sec-md " + (view.md ? "visible" : "in-visible")
    }, React7.createElement("textarea", {
      id: editorId,
      ref: this.nodeMdText,
      name: this.props.name || "textarea",
      autoFocus: this.props.autoFocus,
      placeholder: this.props.placeholder,
      readOnly: this.props.readOnly,
      value: this.state.text,
      className: "section-container input " + (this.config.markdownClass || ""),
      wrap: "hard",
      onChange: this.handleChange,
      onScroll: this.handleInputScroll,
      onMouseOver: function onMouseOver() {
        return _this14.shouldSyncScroll = "md";
      },
      onKeyDown: this.handleEditorKeyDown,
      onPaste: this.handlePaste,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur
    })), React7.createElement("section", {
      className: "section sec-html " + (view.html ? "visible" : "in-visible")
    }, React7.createElement("div", {
      id: previewerId,
      className: "section-container html-wrap",
      ref: this.nodeMdPreviewWrapper,
      onMouseOver: function onMouseOver() {
        return _this14.shouldSyncScroll = "html";
      },
      onScroll: this.handlePreviewScroll
    }, React7.createElement(HtmlRender, {
      html: this.state.html,
      className: this.config.htmlClass,
      ref: this.nodeMdPreview
    })))));
  };
  return Editor2;
}(React7.Component);
Editor.plugins = [];
Editor.addLocale = i18n_default.add.bind(i18n_default);
Editor.useLocale = i18n_default.setCurrent.bind(i18n_default);
Editor.getLocale = i18n_default.getCurrent.bind(i18n_default);
var editor_default = Editor;

// node_modules/react-markdown-editor-lite/esm/plugins/autoResize.js
var React8 = __toESM(require_react());
var AutoResize = function(_PluginComponent) {
  _inheritsLoose(AutoResize2, _PluginComponent);
  function AutoResize2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.timer = null;
    _this.useTimer = _this.getConfig("useTimer") || typeof requestAnimationFrame === "undefined";
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.doResize = _this.doResize.bind(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = AutoResize2.prototype;
  _proto.doResize = function doResize() {
    var _this2 = this;
    var resizeElement = function resizeElement2(e) {
      e.style.height = "auto";
      var height2 = Math.min(Math.max(_this2.getConfig("min"), e.scrollHeight), _this2.getConfig("max"));
      e.style.height = height2 + "px";
      return height2;
    };
    this.timer = null;
    var view = this.editor.getView();
    var el = this.editor.getMdElement();
    var previewer = this.editor.getHtmlElement();
    if (el && view.md) {
      var height = resizeElement(el);
      if (previewer) {
        previewer.style.height = height + "px";
      }
      return;
    }
    if (previewer && view.html) {
      resizeElement(previewer);
    }
  };
  _proto.handleChange = function handleChange() {
    if (this.timer !== null) {
      return;
    }
    if (this.useTimer) {
      this.timer = window.setTimeout(this.doResize);
      return;
    }
    this.timer = requestAnimationFrame(this.doResize);
  };
  _proto.componentDidMount = function componentDidMount() {
    this.editor.on("change", this.handleChange);
    this.editor.on("viewchange", this.handleChange);
    this.handleChange();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.off("change", this.handleChange);
    this.editor.off("viewchange", this.handleChange);
    if (this.timer !== null && this.useTimer) {
      window.clearTimeout(this.timer);
      this.timer = null;
    }
  };
  _proto.render = function render() {
    return React8.createElement("span", null);
  };
  return AutoResize2;
}(PluginComponent);
AutoResize.pluginName = "auto-resize";
AutoResize.align = "left";
AutoResize.defaultConfig = {
  min: 200,
  max: Infinity,
  useTimer: false
};

// node_modules/react-markdown-editor-lite/esm/plugins/block/code-block.js
var React9 = __toESM(require_react());
var BlockCodeBlock = function(_PluginComponent) {
  _inheritsLoose(BlockCodeBlock2, _PluginComponent);
  function BlockCodeBlock2() {
    return _PluginComponent.apply(this, arguments) || this;
  }
  var _proto = BlockCodeBlock2.prototype;
  _proto.render = function render() {
    var _this = this;
    return React9.createElement("span", {
      className: "button button-type-code-block",
      title: i18n_default.get("btnCode"),
      onClick: function onClick() {
        return _this.editor.insertMarkdown("code");
      }
    }, React9.createElement(Icon, {
      type: "code-block"
    }));
  };
  return BlockCodeBlock2;
}(PluginComponent);
BlockCodeBlock.pluginName = "block-code-block";

// node_modules/react-markdown-editor-lite/esm/plugins/block/code-inline.js
var React10 = __toESM(require_react());
var BlockCodeInline = function(_PluginComponent) {
  _inheritsLoose(BlockCodeInline2, _PluginComponent);
  function BlockCodeInline2() {
    return _PluginComponent.apply(this, arguments) || this;
  }
  var _proto = BlockCodeInline2.prototype;
  _proto.render = function render() {
    var _this = this;
    return React10.createElement("span", {
      className: "button button-type-code-inline",
      title: i18n_default.get("btnInlineCode"),
      onClick: function onClick() {
        return _this.editor.insertMarkdown("inlinecode");
      }
    }, React10.createElement(Icon, {
      type: "code"
    }));
  };
  return BlockCodeInline2;
}(PluginComponent);
BlockCodeInline.pluginName = "block-code-inline";

// node_modules/react-markdown-editor-lite/esm/plugins/block/quote.js
var React11 = __toESM(require_react());
var BlockQuote = function(_PluginComponent) {
  _inheritsLoose(BlockQuote2, _PluginComponent);
  function BlockQuote2() {
    return _PluginComponent.apply(this, arguments) || this;
  }
  var _proto = BlockQuote2.prototype;
  _proto.render = function render() {
    var _this = this;
    return React11.createElement("span", {
      className: "button button-type-quote",
      title: i18n_default.get("btnQuote"),
      onClick: function onClick() {
        return _this.editor.insertMarkdown("quote");
      }
    }, React11.createElement(Icon, {
      type: "quote"
    }));
  };
  return BlockQuote2;
}(PluginComponent);
BlockQuote.pluginName = "block-quote";

// node_modules/react-markdown-editor-lite/esm/plugins/block/wrap.js
var React12 = __toESM(require_react());
var BlockWrap = function(_PluginComponent) {
  _inheritsLoose(BlockWrap2, _PluginComponent);
  function BlockWrap2() {
    return _PluginComponent.apply(this, arguments) || this;
  }
  var _proto = BlockWrap2.prototype;
  _proto.render = function render() {
    var _this = this;
    return React12.createElement("span", {
      className: "button button-type-wrap",
      title: i18n_default.get("btnLineBreak"),
      onClick: function onClick() {
        return _this.editor.insertMarkdown("hr");
      }
    }, React12.createElement(Icon, {
      type: "wrap"
    }));
  };
  return BlockWrap2;
}(PluginComponent);
BlockWrap.pluginName = "block-wrap";

// node_modules/react-markdown-editor-lite/esm/plugins/clear.js
var React13 = __toESM(require_react());
var Clear = function(_PluginComponent) {
  _inheritsLoose(Clear2, _PluginComponent);
  function Clear2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = Clear2.prototype;
  _proto.handleClick = function handleClick() {
    if (this.editor.getMdValue() === "") {
      return;
    }
    if (window.confirm && typeof window.confirm === "function") {
      var result = window.confirm(i18n_default.get("clearTip"));
      if (result) {
        this.editor.setText("");
      }
    }
  };
  _proto.render = function render() {
    return React13.createElement("span", {
      className: "button button-type-clear",
      title: i18n_default.get("btnClear"),
      onClick: this.handleClick
    }, React13.createElement(Icon, {
      type: "delete"
    }));
  };
  return Clear2;
}(PluginComponent);
Clear.pluginName = "clear";

// node_modules/react-markdown-editor-lite/esm/plugins/font/bold.js
var React14 = __toESM(require_react());
var FontBold = function(_PluginComponent) {
  _inheritsLoose(FontBold2, _PluginComponent);
  function FontBold2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboard = {
      key: "b",
      keyCode: 66,
      aliasCommand: true,
      withKey: ["ctrlKey"],
      callback: function callback() {
        return _this.editor.insertMarkdown("bold");
      }
    };
    return _this;
  }
  var _proto = FontBold2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    var _this2 = this;
    return React14.createElement("span", {
      className: "button button-type-bold",
      title: i18n_default.get("btnBold"),
      onClick: function onClick() {
        return _this2.editor.insertMarkdown("bold");
      }
    }, React14.createElement(Icon, {
      type: "bold"
    }));
  };
  return FontBold2;
}(PluginComponent);
FontBold.pluginName = "font-bold";

// node_modules/react-markdown-editor-lite/esm/plugins/font/italic.js
var React15 = __toESM(require_react());
var FontItalic = function(_PluginComponent) {
  _inheritsLoose(FontItalic2, _PluginComponent);
  function FontItalic2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboard = {
      key: "i",
      keyCode: 73,
      aliasCommand: true,
      withKey: ["ctrlKey"],
      callback: function callback() {
        return _this.editor.insertMarkdown("italic");
      }
    };
    return _this;
  }
  var _proto = FontItalic2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    var _this2 = this;
    return React15.createElement("span", {
      className: "button button-type-italic",
      title: i18n_default.get("btnItalic"),
      onClick: function onClick() {
        return _this2.editor.insertMarkdown("italic");
      }
    }, React15.createElement(Icon, {
      type: "italic"
    }));
  };
  return FontItalic2;
}(PluginComponent);
FontItalic.pluginName = "font-italic";

// node_modules/react-markdown-editor-lite/esm/plugins/font/strikethrough.js
var React16 = __toESM(require_react());
var FontStrikethrough = function(_PluginComponent) {
  _inheritsLoose(FontStrikethrough2, _PluginComponent);
  function FontStrikethrough2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboard = {
      key: "d",
      keyCode: 68,
      aliasCommand: true,
      withKey: ["ctrlKey"],
      callback: function callback() {
        return _this.editor.insertMarkdown("strikethrough");
      }
    };
    return _this;
  }
  var _proto = FontStrikethrough2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    var _this2 = this;
    return React16.createElement("span", {
      className: "button button-type-strikethrough",
      title: i18n_default.get("btnStrikethrough"),
      onClick: function onClick() {
        return _this2.editor.insertMarkdown("strikethrough");
      }
    }, React16.createElement(Icon, {
      type: "strikethrough"
    }));
  };
  return FontStrikethrough2;
}(PluginComponent);
FontStrikethrough.pluginName = "font-strikethrough";

// node_modules/react-markdown-editor-lite/esm/plugins/font/underline.js
var React17 = __toESM(require_react());
var FontUnderline = function(_PluginComponent) {
  _inheritsLoose(FontUnderline2, _PluginComponent);
  function FontUnderline2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboard = {
      key: "u",
      keyCode: 85,
      withKey: ["ctrlKey"],
      callback: function callback() {
        return _this.editor.insertMarkdown("underline");
      }
    };
    return _this;
  }
  var _proto = FontUnderline2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    var _this2 = this;
    return React17.createElement("span", {
      className: "button button-type-underline",
      title: i18n_default.get("btnUnderline"),
      onClick: function onClick() {
        return _this2.editor.insertMarkdown("underline");
      }
    }, React17.createElement(Icon, {
      type: "underline"
    }));
  };
  return FontUnderline2;
}(PluginComponent);
FontUnderline.pluginName = "font-underline";

// node_modules/react-markdown-editor-lite/esm/plugins/fullScreen.js
var React18 = __toESM(require_react());
var FullScreen = function(_PluginComponent) {
  _inheritsLoose(FullScreen2, _PluginComponent);
  function FullScreen2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.state = {
      enable: _this.editor.isFullScreen()
    };
    return _this;
  }
  var _proto = FullScreen2.prototype;
  _proto.handleClick = function handleClick() {
    this.editor.fullScreen(!this.state.enable);
  };
  _proto.handleChange = function handleChange(enable) {
    this.setState({
      enable
    });
  };
  _proto.componentDidMount = function componentDidMount() {
    this.editor.on("fullscreen", this.handleChange);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.off("fullscreen", this.handleChange);
  };
  _proto.render = function render() {
    if (this.editorConfig.canView && this.editorConfig.canView.fullScreen) {
      var enable = this.state.enable;
      return React18.createElement("span", {
        className: "button button-type-fullscreen",
        title: i18n_default.get(enable ? "btnExitFullScreen" : "btnFullScreen"),
        onClick: this.handleClick
      }, React18.createElement(Icon, {
        type: enable ? "fullscreen-exit" : "fullscreen"
      }));
    }
    return null;
  };
  return FullScreen2;
}(PluginComponent);
FullScreen.pluginName = "full-screen";
FullScreen.align = "right";

// node_modules/react-markdown-editor-lite/esm/plugins/header/index.js
var React21 = __toESM(require_react());

// node_modules/react-markdown-editor-lite/esm/components/DropList/index.js
var React19 = __toESM(require_react());
var DropList = function(_React$Component) {
  _inheritsLoose(DropList2, _React$Component);
  function DropList2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = DropList2.prototype;
  _proto.handleClose = function handleClose(e) {
    e.stopPropagation();
    var onClose = this.props.onClose;
    if (typeof onClose === "function") {
      onClose();
    }
  };
  _proto.render = function render() {
    return React19.createElement("div", {
      className: "drop-wrap " + (this.props.show ? "show" : "hidden"),
      onClick: this.handleClose
    }, this.props.children);
  };
  return DropList2;
}(React19.Component);
var DropList_default = DropList;

// node_modules/react-markdown-editor-lite/esm/plugins/header/HeaderList.js
var React20 = __toESM(require_react());
var HeaderList = function(_React$Component) {
  _inheritsLoose(HeaderList2, _React$Component);
  function HeaderList2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = HeaderList2.prototype;
  _proto.handleHeader = function handleHeader(header) {
    var onSelectHeader = this.props.onSelectHeader;
    if (typeof onSelectHeader === "function") {
      onSelectHeader(header);
    }
  };
  _proto.render = function render() {
    return React20.createElement("ul", {
      className: "header-list"
    }, React20.createElement("li", {
      className: "list-item"
    }, React20.createElement("h1", {
      onClick: this.handleHeader.bind(this, "h1")
    }, "H1")), React20.createElement("li", {
      className: "list-item"
    }, React20.createElement("h2", {
      onClick: this.handleHeader.bind(this, "h2")
    }, "H2")), React20.createElement("li", {
      className: "list-item"
    }, React20.createElement("h3", {
      onClick: this.handleHeader.bind(this, "h3")
    }, "H3")), React20.createElement("li", {
      className: "list-item"
    }, React20.createElement("h4", {
      onClick: this.handleHeader.bind(this, "h4")
    }, "H4")), React20.createElement("li", {
      className: "list-item"
    }, React20.createElement("h5", {
      onClick: this.handleHeader.bind(this, "h5")
    }, "H5")), React20.createElement("li", {
      className: "list-item"
    }, React20.createElement("h6", {
      onClick: this.handleHeader.bind(this, "h6")
    }, "H6")));
  };
  return HeaderList2;
}(React20.Component);
var HeaderList_default = HeaderList;

// node_modules/react-markdown-editor-lite/esm/plugins/header/index.js
var Header = function(_PluginComponent) {
  _inheritsLoose(Header2, _PluginComponent);
  function Header2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.show = _this.show.bind(_assertThisInitialized(_this));
    _this.hide = _this.hide.bind(_assertThisInitialized(_this));
    _this.state = {
      show: false
    };
    return _this;
  }
  var _proto = Header2.prototype;
  _proto.show = function show() {
    this.setState({
      show: true
    });
  };
  _proto.hide = function hide() {
    this.setState({
      show: false
    });
  };
  _proto.render = function render() {
    var _this2 = this;
    return React21.createElement("span", {
      className: "button button-type-header",
      title: i18n_default.get("btnHeader"),
      onMouseEnter: this.show,
      onMouseLeave: this.hide
    }, React21.createElement(Icon, {
      type: "font-size"
    }), React21.createElement(DropList_default, {
      show: this.state.show,
      onClose: this.hide
    }, React21.createElement(HeaderList_default, {
      onSelectHeader: function onSelectHeader(header) {
        return _this2.editor.insertMarkdown(header);
      }
    })));
  };
  return Header2;
}(PluginComponent);
Header.pluginName = "header";

// node_modules/react-markdown-editor-lite/esm/plugins/Image/index.js
var React23 = __toESM(require_react());

// node_modules/react-markdown-editor-lite/esm/plugins/Image/inputFile.js
var React22 = __toESM(require_react());
var InputFile = function(_React$Component) {
  _inheritsLoose(InputFile2, _React$Component);
  function InputFile2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.timerId = void 0;
    _this.locked = false;
    _this.input = React22.createRef();
    return _this;
  }
  var _proto = InputFile2.prototype;
  _proto.click = function click() {
    var _this2 = this;
    if (this.locked || !this.input.current) {
      return;
    }
    this.locked = true;
    this.input.current.value = "";
    this.input.current.click();
    if (this.timerId) {
      window.clearTimeout(this.timerId);
    }
    this.timerId = window.setTimeout(function() {
      _this2.locked = false;
      window.clearTimeout(_this2.timerId);
      _this2.timerId = void 0;
    }, 200);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.timerId) {
      window.clearTimeout(this.timerId);
    }
  };
  _proto.render = function render() {
    return React22.createElement("input", {
      type: "file",
      ref: this.input,
      accept: this.props.accept,
      style: {
        position: "absolute",
        zIndex: -1,
        left: 0,
        top: 0,
        width: 0,
        height: 0,
        opacity: 0
      },
      onChange: this.props.onChange
    });
  };
  return InputFile2;
}(React22.Component);
var inputFile_default = InputFile;

// node_modules/react-markdown-editor-lite/esm/plugins/Image/index.js
var Image = function(_PluginComponent) {
  _inheritsLoose(Image2, _PluginComponent);
  function Image2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.inputFile = React23.createRef();
    _this.onImageChanged = _this.onImageChanged.bind(_assertThisInitialized(_this));
    _this.handleCustomImageUpload = _this.handleCustomImageUpload.bind(_assertThisInitialized(_this));
    _this.handleImageUpload = _this.handleImageUpload.bind(_assertThisInitialized(_this));
    _this.state = {
      show: false
    };
    return _this;
  }
  var _proto = Image2.prototype;
  _proto.handleImageUpload = function handleImageUpload() {
    var onImageUpload = this.editorConfig.onImageUpload;
    if (typeof onImageUpload === "function") {
      if (this.inputFile.current) {
        this.inputFile.current.click();
      }
    } else {
      this.editor.insertMarkdown("image");
    }
  };
  _proto.onImageChanged = function onImageChanged(file) {
    var onImageUpload = this.editorConfig.onImageUpload;
    if (onImageUpload) {
      var placeholder = uploadPlaceholder_default(file, onImageUpload);
      this.editor.insertPlaceholder(placeholder.placeholder, placeholder.uploaded);
    }
  };
  _proto.handleCustomImageUpload = function handleCustomImageUpload(e) {
    var _this2 = this;
    var onCustomImageUpload = this.editorConfig.onCustomImageUpload;
    if (onCustomImageUpload) {
      var res = onCustomImageUpload.call(this, e);
      if (isPromise(res)) {
        res.then(function(result) {
          if (result && result.url) {
            _this2.editor.insertMarkdown("image", {
              target: result.text,
              imageUrl: result.url
            });
          }
        });
      }
    }
  };
  _proto.render = function render() {
    var _this3 = this;
    var isCustom = !!this.editorConfig.onCustomImageUpload;
    return isCustom ? React23.createElement("span", {
      className: "button button-type-image",
      title: i18n_default.get("btnImage"),
      onClick: this.handleCustomImageUpload
    }, React23.createElement(Icon, {
      type: "image"
    })) : React23.createElement("span", {
      className: "button button-type-image",
      title: i18n_default.get("btnImage"),
      onClick: this.handleImageUpload,
      style: {
        position: "relative"
      }
    }, React23.createElement(Icon, {
      type: "image"
    }), React23.createElement(inputFile_default, {
      accept: this.editorConfig.imageAccept || "",
      ref: this.inputFile,
      onChange: function onChange(e) {
        e.persist();
        if (e.target.files && e.target.files.length > 0) {
          _this3.onImageChanged(e.target.files[0]);
        }
      }
    }));
  };
  return Image2;
}(PluginComponent);
Image.pluginName = "image";

// node_modules/react-markdown-editor-lite/esm/plugins/link.js
var React24 = __toESM(require_react());
var Link = function(_PluginComponent) {
  _inheritsLoose(Link2, _PluginComponent);
  function Link2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboard = {
      key: "k",
      keyCode: 75,
      aliasCommand: true,
      withKey: ["ctrlKey"],
      callback: function callback() {
        return _this.editor.insertMarkdown("link");
      }
    };
    return _this;
  }
  var _proto = Link2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    var _this2 = this;
    return React24.createElement("span", {
      className: "button button-type-link",
      title: i18n_default.get("btnLink"),
      onClick: function onClick() {
        return _this2.editor.insertMarkdown("link");
      }
    }, React24.createElement(Icon, {
      type: "link"
    }));
  };
  return Link2;
}(PluginComponent);
Link.pluginName = "link";

// node_modules/react-markdown-editor-lite/esm/plugins/list/ordered.js
var React25 = __toESM(require_react());
var ListOrdered = function(_PluginComponent) {
  _inheritsLoose(ListOrdered2, _PluginComponent);
  function ListOrdered2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboard = {
      key: "7",
      keyCode: 55,
      withKey: ["ctrlKey", "shiftKey"],
      aliasCommand: true,
      callback: function callback() {
        return _this.editor.insertMarkdown("order");
      }
    };
    return _this;
  }
  var _proto = ListOrdered2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    var _this2 = this;
    return React25.createElement("span", {
      className: "button button-type-ordered",
      title: i18n_default.get("btnOrdered"),
      onClick: function onClick() {
        return _this2.editor.insertMarkdown("order");
      }
    }, React25.createElement(Icon, {
      type: "list-ordered"
    }));
  };
  return ListOrdered2;
}(PluginComponent);
ListOrdered.pluginName = "list-ordered";

// node_modules/react-markdown-editor-lite/esm/plugins/list/unordered.js
var React26 = __toESM(require_react());
var ListUnordered = function(_PluginComponent) {
  _inheritsLoose(ListUnordered2, _PluginComponent);
  function ListUnordered2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboard = {
      key: "8",
      keyCode: 56,
      withKey: ["ctrlKey", "shiftKey"],
      aliasCommand: true,
      callback: function callback() {
        return _this.editor.insertMarkdown("unordered");
      }
    };
    return _this;
  }
  var _proto = ListUnordered2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    var _this2 = this;
    return React26.createElement("span", {
      className: "button button-type-unordered",
      title: i18n_default.get("btnUnordered"),
      onClick: function onClick() {
        return _this2.editor.insertMarkdown("unordered");
      }
    }, React26.createElement(Icon, {
      type: "list-unordered"
    }));
  };
  return ListUnordered2;
}(PluginComponent);
ListUnordered.pluginName = "list-unordered";

// node_modules/react-markdown-editor-lite/esm/plugins/logger/index.js
var React27 = __toESM(require_react());

// node_modules/react-markdown-editor-lite/esm/plugins/logger/logger.js
var MAX_LOG_SIZE = 100;
var Logger = function() {
  function Logger3() {
    this.record = [];
    this.recycle = [];
    this.initValue = "";
  }
  var _proto = Logger3.prototype;
  _proto.push = function push(val) {
    var result = this.record.push(val);
    while (this.record.length > MAX_LOG_SIZE) {
      this.record.shift();
    }
    return result;
  };
  _proto.get = function get() {
    return this.record;
  };
  _proto.getLast = function getLast() {
    var length = this.record.length;
    return this.record[length - 1];
  };
  _proto.undo = function undo(skipText) {
    var current = this.record.pop();
    if (typeof current === "undefined") {
      return this.initValue;
    }
    if (current !== skipText) {
      this.recycle.push(current);
      return current;
    }
    var last = this.record.pop();
    if (typeof last === "undefined") {
      this.recycle.push(current);
      return this.initValue;
    }
    this.recycle.push(current);
    return last;
  };
  _proto.redo = function redo() {
    var history = this.recycle.pop();
    if (typeof history !== "undefined") {
      this.push(history);
      return history;
    }
    return void 0;
  };
  _proto.cleanRedo = function cleanRedo() {
    this.recycle = [];
  };
  _proto.getUndoCount = function getUndoCount() {
    return this.undo.length;
  };
  _proto.getRedoCount = function getRedoCount() {
    return this.recycle.length;
  };
  return Logger3;
}();
var logger_default = Logger;

// node_modules/react-markdown-editor-lite/esm/plugins/logger/index.js
var LOGGER_INTERVAL = 600;
var Logger2 = function(_PluginComponent) {
  _inheritsLoose(Logger3, _PluginComponent);
  function Logger3(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleKeyboards = [];
    _this.lastPop = null;
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.handleRedo = _this.handleRedo.bind(_assertThisInitialized(_this));
    _this.handleUndo = _this.handleUndo.bind(_assertThisInitialized(_this));
    _this.handleKeyboards = [{
      key: "y",
      keyCode: 89,
      withKey: ["ctrlKey"],
      callback: _this.handleRedo
    }, {
      key: "z",
      keyCode: 90,
      withKey: ["metaKey", "shiftKey"],
      callback: _this.handleRedo
    }, {
      key: "z",
      keyCode: 90,
      aliasCommand: true,
      withKey: ["ctrlKey"],
      callback: _this.handleUndo
    }];
    _this.logger = new logger_default();
    return _this;
  }
  var _proto = Logger3.prototype;
  _proto.handleUndo = function handleUndo() {
    var last = this.logger.undo(this.editor.getMdValue());
    if (typeof last !== "undefined") {
      this.pause();
      this.lastPop = last;
      this.editor.setText(last);
      this.forceUpdate();
    }
  };
  _proto.handleRedo = function handleRedo() {
    var last = this.logger.redo();
    if (typeof last !== "undefined") {
      this.lastPop = last;
      this.editor.setText(last);
      this.forceUpdate();
    }
  };
  _proto.handleChange = function handleChange(value, e, isChange) {
    var _this2 = this;
    if (this.logger.getLast() === value || this.lastPop !== null && this.lastPop === value) {
      return;
    }
    this.logger.cleanRedo();
    if (isChange) {
      this.logger.push(value);
      this.lastPop = null;
      this.forceUpdate();
      return;
    }
    if (this.timerId) {
      window.clearTimeout(this.timerId);
      this.timerId = 0;
    }
    this.timerId = window.setTimeout(function() {
      if (_this2.logger.getLast() !== value) {
        _this2.logger.push(value);
        _this2.lastPop = null;
        _this2.forceUpdate();
      }
      window.clearTimeout(_this2.timerId);
      _this2.timerId = 0;
    }, LOGGER_INTERVAL);
  };
  _proto.componentDidMount = function componentDidMount() {
    var _this3 = this;
    this.editor.on("change", this.handleChange);
    this.handleKeyboards.forEach(function(it) {
      return _this3.editor.onKeyboard(it);
    });
    this.logger.initValue = this.editor.getMdValue();
    this.forceUpdate();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this4 = this;
    if (this.timerId) {
      window.clearTimeout(this.timerId);
    }
    this.editor.off("change", this.handleChange);
    this.handleKeyboards.forEach(function(it) {
      return _this4.editor.offKeyboard(it);
    });
  };
  _proto.pause = function pause() {
    if (this.timerId) {
      window.clearTimeout(this.timerId);
      this.timerId = void 0;
    }
  };
  _proto.render = function render() {
    var hasUndo = this.logger.getUndoCount() > 1 || this.logger.initValue !== this.editor.getMdValue();
    var hasRedo = this.logger.getRedoCount() > 0;
    return React27.createElement(React27.Fragment, null, React27.createElement("span", {
      className: "button button-type-undo " + (hasUndo ? "" : "disabled"),
      title: i18n_default.get("btnUndo"),
      onClick: this.handleUndo
    }, React27.createElement(Icon, {
      type: "undo"
    })), React27.createElement("span", {
      className: "button button-type-redo " + (hasRedo ? "" : "disabled"),
      title: i18n_default.get("btnRedo"),
      onClick: this.handleRedo
    }, React27.createElement(Icon, {
      type: "redo"
    })));
  };
  return Logger3;
}(PluginComponent);
Logger2.pluginName = "logger";

// node_modules/react-markdown-editor-lite/esm/plugins/modeToggle.js
var React28 = __toESM(require_react());
var NEXT_ACTION;
(function(NEXT_ACTION2) {
  NEXT_ACTION2[NEXT_ACTION2["SHOW_ALL"] = 0] = "SHOW_ALL";
  NEXT_ACTION2[NEXT_ACTION2["SHOW_MD"] = 1] = "SHOW_MD";
  NEXT_ACTION2[NEXT_ACTION2["SHOW_HTML"] = 2] = "SHOW_HTML";
})(NEXT_ACTION || (NEXT_ACTION = {}));
var ModeToggle = function(_PluginComponent) {
  _inheritsLoose(ModeToggle2, _PluginComponent);
  function ModeToggle2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.state = {
      view: _this.editor.getView()
    };
    return _this;
  }
  var _proto = ModeToggle2.prototype;
  _proto.handleClick = function handleClick() {
    switch (this.next) {
      case NEXT_ACTION.SHOW_ALL:
        this.editor.setView({
          html: true,
          md: true
        });
        break;
      case NEXT_ACTION.SHOW_HTML:
        this.editor.setView({
          html: true,
          md: false
        });
        break;
      case NEXT_ACTION.SHOW_MD:
        this.editor.setView({
          html: false,
          md: true
        });
        break;
    }
  };
  _proto.handleChange = function handleChange(view) {
    this.setState({
      view
    });
  };
  _proto.componentDidMount = function componentDidMount() {
    this.editor.on("viewchange", this.handleChange);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.off("viewchange", this.handleChange);
  };
  _proto.getDisplayInfo = function getDisplayInfo() {
    var next = this.next;
    switch (next) {
      case NEXT_ACTION.SHOW_ALL:
        return {
          icon: "view-split",
          title: "All"
        };
      case NEXT_ACTION.SHOW_HTML:
        return {
          icon: "visibility",
          title: "Preview"
        };
      default:
        return {
          icon: "keyboard",
          title: "Editor"
        };
    }
  };
  _proto.render = function render() {
    if (this.isDisplay) {
      var display = this.getDisplayInfo();
      return React28.createElement("span", {
        className: "button button-type-mode",
        title: i18n_default.get("btnMode" + display.title),
        onClick: this.handleClick
      }, React28.createElement(Icon, {
        type: display.icon
      }));
    }
    return null;
  };
  _createClass(ModeToggle2, [{
    key: "isDisplay",
    get: function get() {
      var canView = this.editorConfig.canView;
      if (canView) {
        return [canView.html, canView.md, canView.both].filter(function(it) {
          return it;
        }).length >= 2;
      }
      return false;
    }
    /**
     * 显示标准：
     * 两个都显示的时候，点击显示MD，隐藏HTML
     * 只显示HTML的时候，点击全部显示
     * 只显示MD的时候，点击显示HTML，隐藏MD
     * 如果当前标准因canView不可用，则顺延至下一个
     * 如果都不可用，则返回当前状态
     */
  }, {
    key: "next",
    get: function get() {
      var canView = this.editorConfig.canView;
      var view = this.state.view;
      var actions = [NEXT_ACTION.SHOW_ALL, NEXT_ACTION.SHOW_MD, NEXT_ACTION.SHOW_HTML];
      if (canView) {
        if (!canView.both) {
          actions.splice(actions.indexOf(NEXT_ACTION.SHOW_ALL), 1);
        }
        if (!canView.md) {
          actions.splice(actions.indexOf(NEXT_ACTION.SHOW_MD), 1);
        }
        if (!canView.html) {
          actions.splice(actions.indexOf(NEXT_ACTION.SHOW_HTML), 1);
        }
      }
      var current = NEXT_ACTION.SHOW_MD;
      if (view.html) {
        current = NEXT_ACTION.SHOW_HTML;
      }
      if (view.html && view.md) {
        current = NEXT_ACTION.SHOW_ALL;
      }
      if (actions.length === 0)
        return current;
      if (actions.length === 1)
        return actions[0];
      var index = actions.indexOf(current);
      return index < actions.length - 1 ? actions[index + 1] : actions[0];
    }
  }]);
  return ModeToggle2;
}(PluginComponent);
ModeToggle.pluginName = "mode-toggle";
ModeToggle.align = "right";
var modeToggle_default = ModeToggle;

// node_modules/react-markdown-editor-lite/esm/plugins/table/index.js
var React30 = __toESM(require_react());

// node_modules/react-markdown-editor-lite/esm/plugins/table/table.js
var React29 = __toESM(require_react());
var TableList = function(_React$Component) {
  _inheritsLoose(TableList2, _React$Component);
  function TableList2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.config = {
      padding: 3,
      width: 20,
      height: 20
    };
    var _props$maxRow = props.maxRow, maxRow = _props$maxRow === void 0 ? 5 : _props$maxRow, _props$maxCol = props.maxCol, maxCol = _props$maxCol === void 0 ? 6 : _props$maxCol;
    _this.state = {
      maxRow,
      maxCol,
      list: _this.formatTableModel(maxRow, maxCol)
    };
    return _this;
  }
  var _proto = TableList2.prototype;
  _proto.formatTableModel = function formatTableModel(maxRow, maxCol) {
    if (maxRow === void 0) {
      maxRow = 0;
    }
    if (maxCol === void 0) {
      maxCol = 0;
    }
    var result = new Array(maxRow).fill(void 0);
    return result.map(function(_) {
      return new Array(maxCol).fill(0);
    });
  };
  _proto.calcWrapStyle = function calcWrapStyle() {
    var _this$state = this.state, maxRow = _this$state.maxRow, maxCol = _this$state.maxCol;
    var _this$config = this.config, width = _this$config.width, height = _this$config.height, padding = _this$config.padding;
    var wrapWidth = (width + padding) * maxCol - padding;
    var wrapHeight = (height + padding) * maxRow - padding;
    return {
      width: wrapWidth + "px",
      height: wrapHeight + "px"
    };
  };
  _proto.calcItemStyle = function calcItemStyle(row, col) {
    if (row === void 0) {
      row = 0;
    }
    if (col === void 0) {
      col = 0;
    }
    var _this$config2 = this.config, width = _this$config2.width, height = _this$config2.height, padding = _this$config2.padding;
    var top = (height + padding) * row;
    var left = (width + padding) * col;
    return {
      top: top + "px",
      left: left + "px"
    };
  };
  _proto.getList = function getList(i, j) {
    var list = this.state.list;
    return list.map(function(v, row) {
      return v.map(function(_, col) {
        return row <= i && col <= j ? 1 : 0;
      });
    });
  };
  _proto.handleHover = function handleHover(i, j) {
    this.setState({
      list: this.getList(i, j)
    });
  };
  _proto.handleSetTable = function handleSetTable(i, j) {
    var onSetTable = this.props.onSetTable;
    if (typeof onSetTable === "function") {
      onSetTable({
        row: i + 1,
        col: j + 1
      });
    }
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.visibility === false && prevProps.visibility !== this.props.visibility) {
      this.setState({
        list: this.getList(-1, -1)
      });
    }
  };
  _proto.render = function render() {
    var _this2 = this;
    return React29.createElement("ul", {
      className: "table-list wrap",
      style: this.calcWrapStyle()
    }, this.state.list.map(function(row, i) {
      return row.map(function(col, j) {
        return React29.createElement("li", {
          className: "list-item " + (col === 1 ? "active" : ""),
          key: i + "-" + j,
          style: _this2.calcItemStyle(i, j),
          onMouseOver: _this2.handleHover.bind(_this2, i, j),
          onClick: _this2.handleSetTable.bind(_this2, i, j)
        });
      });
    }));
  };
  return TableList2;
}(React29.Component);
var table_default = TableList;

// node_modules/react-markdown-editor-lite/esm/plugins/table/index.js
var Table = function(_PluginComponent) {
  _inheritsLoose(Table2, _PluginComponent);
  function Table2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.show = _this.show.bind(_assertThisInitialized(_this));
    _this.hide = _this.hide.bind(_assertThisInitialized(_this));
    _this.state = {
      show: false
    };
    return _this;
  }
  var _proto = Table2.prototype;
  _proto.show = function show() {
    this.setState({
      show: true
    });
  };
  _proto.hide = function hide() {
    this.setState({
      show: false
    });
  };
  _proto.render = function render() {
    var _this2 = this;
    var config = this.editorConfig.table || this.props.config;
    return React30.createElement("span", {
      className: "button button-type-table",
      title: i18n_default.get("btnTable"),
      onMouseEnter: this.show,
      onMouseLeave: this.hide
    }, React30.createElement(Icon, {
      type: "grid"
    }), React30.createElement(DropList_default, {
      show: this.state.show,
      onClose: this.hide
    }, React30.createElement(table_default, {
      visibility: this.state.show,
      maxRow: config.maxRow,
      maxCol: config.maxCol,
      onSetTable: function onSetTable(option) {
        return _this2.editor.insertMarkdown("table", option);
      }
    })));
  };
  return Table2;
}(PluginComponent);
Table.pluginName = "table";
Table.defaultConfig = {
  maxRow: 6,
  maxCol: 6
};

// node_modules/react-markdown-editor-lite/esm/plugins/tabInsert/index.js
var React32 = __toESM(require_react());

// node_modules/react-markdown-editor-lite/esm/plugins/tabInsert/TabMapList.js
var import_classnames = __toESM(require_classnames());
var React31 = __toESM(require_react());
var TabMapList = function(_React$Component) {
  _inheritsLoose(TabMapList2, _React$Component);
  function TabMapList2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = TabMapList2.prototype;
  _proto.handleSelectMapValue = function handleSelectMapValue(mapValue) {
    var onSelectMapValue = this.props.onSelectMapValue;
    if (typeof onSelectMapValue === "function") {
      onSelectMapValue(mapValue);
    }
  };
  _proto.render = function render() {
    var _this = this;
    var value = this.props.value;
    return React31.createElement("ul", {
      className: "tab-map-list"
    }, [1, 2, 4, 8].map(function(it) {
      return React31.createElement("li", {
        key: it,
        className: (0, import_classnames.default)("list-item", {
          active: value === it
        })
      }, React31.createElement("div", {
        onClick: _this.handleSelectMapValue.bind(_this, it)
      }, it === 1 ? i18n_default.get("tab") : it + " " + i18n_default.get("spaces")));
    }));
  };
  return TabMapList2;
}(React31.Component);
var TabMapList_default = TabMapList;

// node_modules/react-markdown-editor-lite/esm/plugins/tabInsert/index.js
var TabInsert = function(_PluginComponent) {
  _inheritsLoose(TabInsert2, _PluginComponent);
  function TabInsert2(props) {
    var _this;
    _this = _PluginComponent.call(this, props) || this;
    _this.show = _this.show.bind(_assertThisInitialized(_this));
    _this.hide = _this.hide.bind(_assertThisInitialized(_this));
    _this.handleChangeMapValue = _this.handleChangeMapValue.bind(_assertThisInitialized(_this));
    _this.state = {
      tabMapValue: _this.getConfig("tabMapValue"),
      show: false
    };
    _this.handleKeyboard = {
      key: "Tab",
      keyCode: 9,
      aliasCommand: true,
      withKey: [],
      callback: function callback() {
        return _this.editor.insertMarkdown("tab", {
          tabMapValue: _this.state.tabMapValue
        });
      }
    };
    return _this;
  }
  var _proto = TabInsert2.prototype;
  _proto.show = function show() {
    this.setState({
      show: true
    });
  };
  _proto.hide = function hide() {
    this.setState({
      show: false
    });
  };
  _proto.handleChangeMapValue = function handleChangeMapValue(mapValue) {
    this.setState({
      tabMapValue: mapValue
    });
  };
  _proto.componentDidMount = function componentDidMount() {
    if (this.editorConfig.shortcuts) {
      this.editor.onKeyboard(this.handleKeyboard);
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.editor.offKeyboard(this.handleKeyboard);
  };
  _proto.render = function render() {
    return React32.createElement("span", {
      className: "button button-type-header",
      title: i18n_default.get("selectTabMap"),
      onClick: this.show,
      onMouseLeave: this.hide
    }, React32.createElement(Icon, {
      type: "tab"
    }), React32.createElement(DropList_default, {
      show: this.state.show,
      onClose: this.hide
    }, React32.createElement(TabMapList_default, {
      value: this.state.tabMapValue,
      onSelectMapValue: this.handleChangeMapValue
    })));
  };
  return TabInsert2;
}(PluginComponent);
TabInsert.pluginName = "tab-insert";
TabInsert.defaultConfig = {
  tabMapValue: 1
};

// node_modules/react-markdown-editor-lite/esm/index.js
editor_default.use(Header);
editor_default.use(FontBold);
editor_default.use(FontItalic);
editor_default.use(FontUnderline);
editor_default.use(FontStrikethrough);
editor_default.use(ListUnordered);
editor_default.use(ListOrdered);
editor_default.use(BlockQuote);
editor_default.use(BlockWrap);
editor_default.use(BlockCodeInline);
editor_default.use(BlockCodeBlock);
editor_default.use(Table);
editor_default.use(Image);
editor_default.use(Link);
editor_default.use(Clear);
editor_default.use(Logger2);
editor_default.use(modeToggle_default);
editor_default.use(FullScreen);
var Plugins = {
  Header,
  FontBold,
  FontItalic,
  FontUnderline,
  FontStrikethrough,
  ListUnordered,
  ListOrdered,
  BlockQuote,
  BlockWrap,
  BlockCodeInline,
  BlockCodeBlock,
  Table,
  Image,
  Link,
  Clear,
  Logger: Logger2,
  ModeToggle: modeToggle_default,
  FullScreen,
  AutoResize,
  TabInsert
};
var esm_default = editor_default;
export {
  DropList_default as DropList,
  PluginComponent,
  Plugins,
  esm_default as default,
  decorate_default as getDecorated
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=react-markdown-editor-lite.js.map
